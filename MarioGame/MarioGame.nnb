{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "Let's build a Mario Bros game!"
            ],
            "outputs": []
        },
        {
            "language": "html",
            "source": [
                "<img src=\"https://media.tenor.com/Ml6EMlo_4V4AAAAC/mario-bros-dance-mario.gif\" height=\"200\"/>\r\n<img src=\"https://media.tenor.com/pKgBbArPChQAAAAM/mario-super.gif\" height=\"200\"/>"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<img src=\"https://media.tenor.com/Ml6EMlo_4V4AAAAC/mario-bros-dance-mario.gif\" height=\"200\"/>\r",
                                "<img src=\"https://media.tenor.com/pKgBbArPChQAAAAM/mario-super.gif\" height=\"200\"/>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "- Create a FlappyGame folder\r\n- In that folder, create two files, index.html and flappy.js\r\n- Inside that folder create another falder called sprites, copy all the image files inside it"
            ],
            "outputs": []
        },
        {
            "language": "html",
            "source": [
                "The code for index.html file is the following:\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\" />\r\n    <title>Mario Bross Kaboom</title>\r\n  </head>\r\n  <body>\r\n    <script src=\"https://unpkg.com/kaboom@3000.0.1/dist/kaboom.js\"></script>\r\n    <script src=\"./marioGame.js\"></script>\r\n  </body>\r\n</html>\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Let's create a blank app, create a game.ts file with the following code:\r\n\r\n// initialize context with black background\r\nkaboom({background: [0, 0, 0, 1]});\r\n\r\n// load block sprite (as floor)\r\nloadSprite('block', 'sprites/block.png');\r\n\r\n// Create new scene called game, pass two arguments, level and score\r\nscene(\"game\", ({ level, score }) => {\r\n    // create a map\r\n    const maps = [\r\n      [\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '==============================   =====',\r\n      ]\r\n    ];\r\n  \r\n    // level configuration for individual sprites\r\n    const levelCfg = {\r\n      tileWidth: 20,\r\n      tileHeight: 20,\r\n      tiles: {\r\n      '=': () => [sprite('block'), area(), body({ isStatic: true })]} \r\n    };\r\n  \r\n    // add level to game\r\n    const gameLevel = addLevel(maps[level], levelCfg);\r\n})\r\n\r\n// launch game with scene called game and pass two parameters\r\ngo(\"game\", { level: 0, score: 0});\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Let's add Mario! We will give some zoom and include gravity\r\n\r\n\r\n// initialize context with black background and scale\r\nkaboom({background: [0, 0, 0, 1], scale: 2});\r\n\r\nconst GRAVITY = 900;\r\n\r\n// set game gravity\r\nsetGravity(GRAVITY);\r\n\r\n// load sprites\r\nloadSprite('block', 'sprites/block.png');\r\nloadSprite('mario', 'sprites/mario.png');\r\n\r\n// Create new scene called game, pass two arguments, level and score\r\nscene(\"game\", ({ level, score }) => {\r\n    // create a map\r\n    const maps = [\r\n      [\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '==============================   =====',\r\n      ]\r\n    ];\r\n  \r\n    // level configuration for individual sprites\r\n    const levelCfg = {\r\n      tileWidth: 20,\r\n      tileHeight: 20,\r\n      tiles: {\r\n      '=': () => [sprite('block'), area(), body({ isStatic: true })]} \r\n    };\r\n  \r\n    // add level to game\r\n    const gameLevel = addLevel(maps[level], levelCfg);\r\n\r\n    // add mario player\r\n    const player = add([\r\n      sprite('mario'), \r\n      pos(30, 0),\r\n      area(),\r\n      body(),\r\n    ]);\r\n})\r\n\r\n// launch game with scene called game and pass two parameters\r\ngo(\"game\", { level: 0, score: 0});"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Let's make mario move\r\n// Let's add Mario! We will give some zoom and include gravity\r\n\r\n\r\n// initialize context with black background and scale\r\nkaboom({background: [0, 0, 0, 1], scale: 2});\r\n\r\nconst GRAVITY = 900;\r\nconst MOVE_SPEED = 120;\r\nconst JUMP_FORCE = 360;\r\n\r\n// set game gravity\r\nsetGravity(GRAVITY);\r\n\r\n// load sprites\r\nloadSprite('block', 'sprites/block.png');\r\nloadSprite('mario', 'sprites/mario.png');\r\n\r\n// Create new scene called game, pass two arguments, level and score\r\nscene(\"game\", ({ level, score }) => {\r\n    // create a map\r\n    const maps = [\r\n      [\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '==============================   =====',\r\n      ]\r\n    ];\r\n  \r\n    // level configuration for individual sprites\r\n    const levelCfg = {\r\n      tileWidth: 20,\r\n      tileHeight: 20,\r\n      tiles: {\r\n      '=': () => [sprite('block'), area(), body({ isStatic: true })]} \r\n    };\r\n  \r\n    // add level to game\r\n    const gameLevel = addLevel(maps[level], levelCfg);\r\n\r\n    // add mario player\r\n    const player = add([\r\n      sprite('mario'), \r\n      pos(30, 0),\r\n      area(),\r\n      body(),\r\n    ]);\r\n\r\n    // on key left movement and flip sprite\r\n    onKeyDown('left', () => {\r\n        player.move(-MOVE_SPEED, 0);\r\n        player.flipX = true;\r\n      });\r\n    \r\n    // on key right movement and flip sprite\r\n    onKeyDown('right', () => {\r\n        player.move(MOVE_SPEED, 0);\r\n        player.flipX = false;\r\n    });\r\n\r\n    // on key space jump if is in the ground\r\n    onKeyPress('space', () => {\r\n        if (player.isGrounded()) {\r\n            player.jump(JUMP_FORCE);\r\n        }\r\n    });\r\n})\r\n\r\n// launch game with scene called game and pass two parameters\r\ngo(\"game\", { level: 0, score: 0});"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Let's make the camera center over Mario and if it falls, go to lose screen\r\n\r\n// initialize context with black background and scale\r\nkaboom({background: [0, 0, 0, 1], scale: 2});\r\n\r\nconst GRAVITY = 900;\r\nconst MOVE_SPEED = 120;\r\nconst JUMP_FORCE = 360;\r\nconst FALL_DEATH = 1000;\r\n\r\n// set game gravity\r\nsetGravity(GRAVITY);\r\n\r\n// load sprites\r\nloadSprite('block', '/sprites/block.png');\r\nloadSprite('mario', '/sprites/mario.png');\r\n\r\n// Create new scene called game, pass two arguments, level and score\r\nscene(\"game\", ({ level, score }) => {\r\n    // create a map\r\n    const maps = [\r\n      [\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '==============================   =====',\r\n      ]\r\n    ];\r\n  \r\n    // level configuration for individual sprites\r\n    const levelCfg = {\r\n      tileWidth: 20,\r\n      tileHeight: 20,\r\n      tiles: {\r\n      '=': () => [sprite('block'), area(), body({ isStatic: true })]} \r\n    };\r\n  \r\n    // add level to game\r\n    const gameLevel = addLevel(maps[level], levelCfg);\r\n\r\n    // add mario player\r\n    const player = add([\r\n      sprite('mario'), \r\n      pos(30, 0),\r\n      area(),\r\n      body(),\r\n    ]);\r\n\r\n    // continuous update for each frame\r\n    player.onUpdate(() => {\r\n        //center camera on player\r\n        camPos(player.pos); \r\n        // if player position is above fall death, go to lose screen\r\n        if (player.pos.y >= FALL_DEATH) {\r\n            go('lose', { score: 0});\r\n        }\r\n      });\r\n\r\n    // on key left movement and flip sprite\r\n    onKeyDown('left', () => {\r\n        player.move(-MOVE_SPEED, 0);\r\n        player.flipX = true;\r\n      });\r\n    \r\n    // on key right movement and flip sprite\r\n    onKeyDown('right', () => {\r\n        player.move(MOVE_SPEED, 0);\r\n        player.flipX = false;\r\n    });\r\n\r\n    // on key space jump if is in the ground\r\n    onKeyPress('space', () => {\r\n        if (player.isGrounded()) {\r\n            player.jump(JUMP_FORCE);\r\n        }\r\n    });\r\n})\r\n\r\n// Create new sceen with score\r\nscene('lose', ({ score }) => {\r\n    add([\r\n        text(`Total score: ${score}`), \r\n        anchor('center'), \r\n        pos(width()/2, \r\n        height()/ 2)])\r\n})\r\n\r\n// launch game with scene called game and pass two parameters\r\ngo(\"game\", { level: 0, score: 0});"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Let's add more stuff on the screen\r\n\r\n// initialize context with black background and scale\r\nkaboom({background: [0, 0, 0, 1], scale: 2});\r\n\r\nconst GRAVITY = 900;\r\nconst MOVE_SPEED = 120;\r\nconst JUMP_FORCE = 360;\r\nconst FALL_DEATH = 1000;\r\n\r\n// set game gravity\r\nsetGravity(GRAVITY);\r\n\r\n// load sprites\r\nloadSprite('block', 'sprites/block.png');\r\nloadSprite('mario', 'sprites/mario.png');\r\nloadSprite('coin', 'sprites/coin.png');\r\nloadSprite('evil-shroom', 'sprites/evil-shroom.png');\r\nloadSprite('brick', 'sprites/brick.png');\r\nloadSprite('mushroom', 'sprites/mushroom.png');\r\nloadSprite('surprise', 'sprites/surprise.png');\r\nloadSprite('unboxed', 'sprites/unboxed.png');\r\nloadSprite('pipe-top-left', 'sprites/pipe-top-left.png');\r\nloadSprite('pipe-top-right', 'sprites/pipe-top-right.png');\r\nloadSprite('pipe-bottom-left', 'sprites/pipe-bottom-left.png');\r\nloadSprite('pipe-bottom-right', 'sprites/pipe-bottom-right.png');\r\nloadSprite('blue-block', 'sprites/blue-block.png');\r\nloadSprite('blue-brick', 'sprites/blue-brick.png');\r\nloadSprite('blue-steel', 'sprites/blue-steel.png');\r\nloadSprite('blue-evil-mushroom', 'sprites/blue-evil-mushroom.png');\r\nloadSprite('blue-surprise', 'sprites/blue-surprise.png');\r\n\r\n// Create new scene called game, pass two arguments, level and score\r\nscene(\"game\", ({ level, score }) => {\r\n    // create a map\r\n    const maps = [\r\n      [\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '     %   =*=%=                        ',\r\n        '                                      ',\r\n        '                            -+        ',\r\n        '                    ^   ^   ()        ',\r\n        '==============================   =====',\r\n      ]\r\n    ];\r\n  \r\n    // level configuration for individual sprites\r\n    const levelCfg = {\r\n      tileWidth: 20,\r\n      tileHeight: 20,\r\n      tiles: {\r\n        '=': () => [sprite('block'), area(), body({ isStatic: true })],\r\n        '$': () => [sprite('coin'), 'coin'],\r\n        '%': () => [sprite('surprise'), area(), body({ isStatic: true }), 'coin-surprise'],\r\n        '*': () => [sprite('surprise'), area(), body({ isStatic: true }), 'mushroom-surprise'],\r\n        '}': () => [sprite('unboxed'), area(), body({ isStatic: true })],\r\n        '(': () => [sprite('pipe-bottom-left'), area(), body({ isStatic: true }), scale(0.5)],\r\n        ')': () => [sprite('pipe-bottom-right'), area(), body({ isStatic: true }), scale(0.5)],\r\n        '-': () => [sprite('pipe-top-left'), area(), body({ isStatic: true }), scale(0.5), 'pipe'],\r\n        '+': () => [sprite('pipe-top-right'), area(), body({ isStatic: true }),  scale(0.5), 'pipe'],\r\n        '^': () => [sprite('evil-shroom'), area(), 'dangerous'],\r\n        '#': () => [sprite('mushroom'), area(), 'mushroom', body()],\r\n        '!': () => [sprite('blue-block'), area(), body({ isStatic: true }), scale(0.5)],\r\n        '£': () => [sprite('blue-brick'), area(), body({ isStatic: true }), scale(0.5)],\r\n        'z': () => [sprite('blue-evil-mushroom'), area(), scale(0.5), 'dangerous'],\r\n        '@': () => [sprite('blue-surprise'), area(), body({ isStatic: true }), scale(0.5), 'coin-surprise'],\r\n        'x': () => [sprite('blue-steel'), area(), body({ isStatic: true }), scale(0.5)]} \r\n    };\r\n  \r\n    // add level to game\r\n    const gameLevel = addLevel(maps[level], levelCfg);\r\n\r\n    // add mario player\r\n    const player = add([\r\n      sprite('mario'), \r\n      pos(30, 0),\r\n      area(),\r\n      body(),\r\n    ]);\r\n\r\n    // continuous update for each frame\r\n    player.onUpdate(() => {\r\n        //center camera on player\r\n        camPos(player.pos); \r\n        // if player position is above fall death, go to lose screen\r\n        if (player.pos.y >= FALL_DEATH) {\r\n            go('lose', { score: 0});\r\n        }\r\n      });\r\n\r\n    // on key left movement and flip sprite\r\n    onKeyDown('left', () => {\r\n        player.move(-MOVE_SPEED, 0);\r\n        player.flipX = true;\r\n      });\r\n    \r\n    // on key right movement and flip sprite\r\n    onKeyDown('right', () => {\r\n        player.move(MOVE_SPEED, 0);\r\n        player.flipX = false;\r\n    });\r\n\r\n    // on key space jump if is in the ground\r\n    onKeyPress('space', () => {\r\n        if (player.isGrounded()) {\r\n            player.jump(JUMP_FORCE);\r\n        }\r\n    });\r\n})\r\n\r\n// Create new sceen with score\r\nscene('lose', ({ score }) => {\r\n    add([\r\n        text(`Total score: ${score}`), \r\n        anchor('center'), \r\n        pos(width()/2, \r\n        height()/ 2)])\r\n})\r\n\r\n// launch game with scene called game and pass two parameters\r\ngo(\"game\", { level: 0, score: 0});"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Let's make mario hit surprises and add score label\r\n\r\n// initialize context with black background and scale\r\nkaboom({background: [0, 0, 0, 1], scale: 2});\r\n\r\nconst GRAVITY = 900;\r\nconst MOVE_SPEED = 120;\r\nconst JUMP_FORCE = 360;\r\nconst FALL_DEATH = 1000;\r\n\r\n// set game gravity\r\nsetGravity(GRAVITY);\r\n\r\n// load sprites\r\nloadSprite('block', 'sprites/block.png');\r\nloadSprite('mario', 'sprites/mario.png');\r\nloadSprite('coin', 'sprites/coin.png');\r\nloadSprite('evil-shroom', 'sprites/evil-shroom.png');\r\nloadSprite('brick', 'sprites/brick.png');\r\nloadSprite('mushroom', 'sprites/mushroom.png');\r\nloadSprite('surprise', 'sprites/surprise.png');\r\nloadSprite('unboxed', 'sprites/unboxed.png');\r\nloadSprite('pipe-top-left', 'sprites/pipe-top-left.png');\r\nloadSprite('pipe-top-right', 'sprites/pipe-top-right.png');\r\nloadSprite('pipe-bottom-left', 'sprites/pipe-bottom-left.png');\r\nloadSprite('pipe-bottom-right', 'sprites/pipe-bottom-right.png');\r\nloadSprite('blue-block', 'sprites/blue-block.png');\r\nloadSprite('blue-brick', 'sprites/blue-brick.png');\r\nloadSprite('blue-steel', 'sprites/blue-steel.png');\r\nloadSprite('blue-evil-mushroom', 'sprites/blue-evil-mushroom.png');\r\nloadSprite('blue-surprise', 'sprites/blue-surprise.png');\r\n\r\n// Create new scene called game, pass two arguments, level and score\r\nscene(\"game\", ({ level, score }) => {\r\n    // create a map\r\n    const maps = [\r\n      [\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '     %   =*=%=                        ',\r\n        '                                      ',\r\n        '                            -+        ',\r\n        '                    ^   ^   ()        ',\r\n        '==============================   =====',\r\n      ]\r\n    ];\r\n  \r\n    // level configuration for individual sprites\r\n    const levelCfg = {\r\n      tileWidth: 20,\r\n      tileHeight: 20,\r\n      tiles: {\r\n        '=': () => [sprite('block'), area(), body({ isStatic: true })],\r\n        '$': () => [sprite('coin'), 'coin'],\r\n        '%': () => [sprite('surprise'), area(), body({ isStatic: true }), 'coin-surprise'],\r\n        '*': () => [sprite('surprise'), area(), body({ isStatic: true }), 'mushroom-surprise'],\r\n        '}': () => [sprite('unboxed'), area(), body({ isStatic: true })],\r\n        '(': () => [sprite('pipe-bottom-left'), area(), body({ isStatic: true }), scale(0.5)],\r\n        ')': () => [sprite('pipe-bottom-right'), area(), body({ isStatic: true }), scale(0.5)],\r\n        '-': () => [sprite('pipe-top-left'), area(), body({ isStatic: true }), scale(0.5), 'pipe'],\r\n        '+': () => [sprite('pipe-top-right'), area(), body({ isStatic: true }),  scale(0.5), 'pipe'],\r\n        '^': () => [sprite('evil-shroom'), area(), 'dangerous'],\r\n        '#': () => [sprite('mushroom'), area(), 'mushroom', body()],\r\n        '!': () => [sprite('blue-block'), area(), body({ isStatic: true }), scale(0.5)],\r\n        '£': () => [sprite('blue-brick'), area(), body({ isStatic: true }), scale(0.5)],\r\n        'z': () => [sprite('blue-evil-mushroom'), area(), scale(0.5), 'dangerous'],\r\n        '@': () => [sprite('blue-surprise'), area(), body({ isStatic: true }), scale(0.5), 'coin-surprise'],\r\n        'x': () => [sprite('blue-steel'), area(), body({ isStatic: true }), scale(0.5)]} \r\n    };\r\n  \r\n    // add level to game\r\n    const gameLevel = addLevel(maps[level], levelCfg);\r\n\r\n    // add a score lavel on screen\r\n    const scoreLabel = add([\r\n      text(score),\r\n      pos(30, 6),\r\n      {\r\n        value: score\r\n      }\r\n    ]);\r\n\r\n    // add mario player\r\n    const player = add([\r\n      sprite('mario'), \r\n      pos(30, 0),\r\n      area(),\r\n      body(),\r\n    ]);\r\n\r\n    // continuous update for each frame\r\n    player.onUpdate(() => {\r\n        //center camera on player\r\n        camPos(player.pos); \r\n        // if player position is above fall death, go to lose screen\r\n        if (player.pos.y >= FALL_DEATH) {\r\n            go('lose', { score: 0});\r\n        }\r\n      });\r\n\r\n    // on key left movement and flip sprite\r\n    onKeyDown('left', () => {\r\n        player.move(-MOVE_SPEED, 0);\r\n        player.flipX = true;\r\n      });\r\n    \r\n    // on key right movement and flip sprite\r\n    onKeyDown('right', () => {\r\n        player.move(MOVE_SPEED, 0);\r\n        player.flipX = false;\r\n    });\r\n\r\n    // on key space jump if is in the ground\r\n    onKeyPress('space', () => {\r\n        if (player.isGrounded()) {\r\n            player.jump(JUMP_FORCE);\r\n        }\r\n    });\r\n\r\n\r\n    // headbutt even when player hits with head\r\n    player.on(\"headbutt\", (obj) => {\r\n      // if player hits with head a coin-surprise object\r\n      if (obj.is('coin-surprise')) {\r\n          //spawn a coin\r\n          let coin = gameLevel.spawn('$', obj.tilePos.sub(0, 1))\r\n          //destroy object\r\n          destroy(obj);\r\n          // spawn an unboxed sprited in the position of the surprise box\r\n          gameLevel.spawn('}', obj.tilePos.sub(0,0))\r\n          // wait 0.5 seconds, destroy the coin and add to score\r\n          wait(0.5, () => {\r\n            coin.destroy();\r\n            scoreLabel.value++;\r\n            scoreLabel.text = scoreLabel.value;\r\n          })\r\n        }\r\n        // if player hits with head a mushroom-surprise object\r\n        if (obj.is('mushroom-surprise')) {\r\n          gameLevel.spawn('#', obj.tilePos.sub(0, 1))\r\n          destroy(obj)\r\n          gameLevel.spawn('}', obj.tilePos.sub(0,0))\r\n        }\r\n    });\r\n})\r\n\r\n// Create new sceen with score\r\nscene('lose', ({ score }) => {\r\n    add([\r\n        text(`Total score: ${score}`), \r\n        anchor('center'), \r\n        pos(width()/2, \r\n        height()/ 2)])\r\n})\r\n\r\n// launch game with scene called game and pass two parameters\r\ngo(\"game\", { level: 0, score: 0});"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Let's make the mashroom and the evil-mashrooms moves, if mario collides with evil-mashroom, go to lose screen\r\n\r\n\r\n// initialize context with black background and scale\r\nkaboom({background: [0, 0, 0, 1], scale: 2});\r\n\r\nconst GRAVITY = 900;\r\nconst MOVE_SPEED = 120;\r\nconst JUMP_FORCE = 360;\r\nconst FALL_DEATH = 1000;\r\nconst ENEMY_SPEED = 20;\r\n\r\n// set game gravity\r\nsetGravity(GRAVITY);\r\n\r\n// load sprites\r\nloadSprite('block', 'sprites/block.png');\r\nloadSprite('mario', 'sprites/mario.png');\r\nloadSprite('coin', 'sprites/coin.png');\r\nloadSprite('evil-shroom', 'sprites/evil-shroom.png');\r\nloadSprite('brick', 'sprites/brick.png');\r\nloadSprite('mushroom', 'sprites/mushroom.png');\r\nloadSprite('surprise', 'sprites/surprise.png');\r\nloadSprite('unboxed', 'sprites/unboxed.png');\r\nloadSprite('pipe-top-left', 'sprites/pipe-top-left.png');\r\nloadSprite('pipe-top-right', 'sprites/pipe-top-right.png');\r\nloadSprite('pipe-bottom-left', 'sprites/pipe-bottom-left.png');\r\nloadSprite('pipe-bottom-right', 'sprites/pipe-bottom-right.png');\r\nloadSprite('blue-block', 'sprites/blue-block.png');\r\nloadSprite('blue-brick', 'sprites/blue-brick.png');\r\nloadSprite('blue-steel', 'sprites/blue-steel.png');\r\nloadSprite('blue-evil-mushroom', 'sprites/blue-evil-mushroom.png');\r\nloadSprite('blue-surprise', 'sprites/blue-surprise.png');\r\n\r\n// Create new scene called game, pass two arguments, level and score\r\nscene(\"game\", ({ level, score }) => {\r\n    // create a map\r\n    const maps = [\r\n      [\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '     %   =*=%=                        ',\r\n        '                                      ',\r\n        '                            -+        ',\r\n        '                    ^   ^   ()        ',\r\n        '==============================   =====',\r\n      ]\r\n    ];\r\n  \r\n    // level configuration for individual sprites\r\n    const levelCfg = {\r\n      tileWidth: 20,\r\n      tileHeight: 20,\r\n      tiles: {\r\n        '=': () => [sprite('block'), area(), body({ isStatic: true })],\r\n        '$': () => [sprite('coin'), 'coin'],\r\n        '%': () => [sprite('surprise'), area(), body({ isStatic: true }), 'coin-surprise'],\r\n        '*': () => [sprite('surprise'), area(), body({ isStatic: true }), 'mushroom-surprise'],\r\n        '}': () => [sprite('unboxed'), area(), body({ isStatic: true })],\r\n        '(': () => [sprite('pipe-bottom-left'), area(), body({ isStatic: true }), scale(0.5)],\r\n        ')': () => [sprite('pipe-bottom-right'), area(), body({ isStatic: true }), scale(0.5)],\r\n        '-': () => [sprite('pipe-top-left'), area(), body({ isStatic: true }), scale(0.5), 'pipe'],\r\n        '+': () => [sprite('pipe-top-right'), area(), body({ isStatic: true }),  scale(0.5), 'pipe'],\r\n        '^': () => [sprite('evil-shroom'), area(), 'dangerous'],\r\n        '#': () => [sprite('mushroom'), area(), 'mushroom', body()],\r\n        '!': () => [sprite('blue-block'), area(), body({ isStatic: true }), scale(0.5)],\r\n        '£': () => [sprite('blue-brick'), area(), body({ isStatic: true }), scale(0.5)],\r\n        'z': () => [sprite('blue-evil-mushroom'), area(), scale(0.5), 'dangerous'],\r\n        '@': () => [sprite('blue-surprise'), area(), body({ isStatic: true }), scale(0.5), 'coin-surprise'],\r\n        'x': () => [sprite('blue-steel'), area(), body({ isStatic: true }), scale(0.5)]} \r\n    };\r\n  \r\n    // add level to game\r\n    const gameLevel = addLevel(maps[level], levelCfg);\r\n\r\n    // add a score lavel on screen\r\n    const scoreLabel = add([\r\n      text(score),\r\n      pos(30, 6),\r\n      {\r\n        value: score\r\n      }\r\n    ]);\r\n\r\n    // add mario player\r\n    const player = add([\r\n      sprite('mario'), \r\n      pos(30, 0),\r\n      area(),\r\n      body(),\r\n    ]);\r\n\r\n    // continuous update for each frame\r\n    player.onUpdate(() => {\r\n        //center camera on player\r\n        camPos(player.pos); \r\n        // if player position is above fall death, go to lose screen\r\n        if (player.pos.y >= FALL_DEATH) {\r\n            go('lose', { score: 0});\r\n        }\r\n      });\r\n\r\n    // on key left movement and flip sprite\r\n    onKeyDown('left', () => {\r\n        player.move(-MOVE_SPEED, 0);\r\n        player.flipX = true;\r\n      });\r\n    \r\n    // on key right movement and flip sprite\r\n    onKeyDown('right', () => {\r\n        player.move(MOVE_SPEED, 0);\r\n        player.flipX = false;\r\n    });\r\n\r\n    // on key space jump if is in the ground\r\n    onKeyPress('space', () => {\r\n        if (player.isGrounded()) {\r\n            player.jump(JUMP_FORCE);\r\n        }\r\n    });\r\n\r\n\r\n    // headbutt even when player hits with head\r\n    player.on(\"headbutt\", (obj) => {\r\n      // if player hits with head a coin-surprise object\r\n      if (obj.is('coin-surprise')) {\r\n          //spawn a coin\r\n          let coin = gameLevel.spawn('$', obj.tilePos.sub(0, 1))\r\n          //destroy object\r\n          destroy(obj);\r\n          // spawn an unboxed sprited in the position of the surprise box\r\n          gameLevel.spawn('}', obj.tilePos.sub(0,0))\r\n          // wait 0.5 seconds, destroy the coin and add to score\r\n          wait(0.5, () => {\r\n            coin.destroy();\r\n            scoreLabel.value++;\r\n            scoreLabel.text = scoreLabel.value;\r\n          })\r\n        }\r\n        // if player hits with head a mushroom-surprise object\r\n        if (obj.is('mushroom-surprise')) {\r\n          gameLevel.spawn('#', obj.tilePos.sub(0, 1))\r\n          destroy(obj)\r\n          gameLevel.spawn('}', obj.tilePos.sub(0,0))\r\n        }\r\n    });\r\n\r\n    // update mushroom in each frame\r\n    onUpdate(\"mushroom\", (m) => {\r\n      m.move(20, 0);\r\n    });\r\n  \r\n    // update dangerous in each frame\r\n    onUpdate(\"dangerous\", (d) => {\r\n      d.move(-ENEMY_SPEED, 0);\r\n    });\r\n  \r\n    // if player collides with dangerous, go to lose screen\r\n    player.onCollide('dangerous', (d) => {\r\n      go('lose', { score: scoreLabel.value});\r\n    });\r\n})\r\n\r\n// Create new sceen with score\r\nscene('lose', ({ score }) => {\r\n    add([\r\n        text(`Total score: ${score}`), \r\n        anchor('center'), \r\n        pos(width()/2, \r\n        height()/ 2)])\r\n})\r\n\r\n// launch game with scene called game and pass two parameters\r\ngo(\"game\", { level: 0, score: 0});"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// If mario jumps on evil-mashroom destroy it, if collides with mashroom, he gets bigger\r\n\r\n// initialize context with black background and scale\r\nkaboom({background: [0, 0, 0, 1], scale: 2});\r\n\r\nconst GRAVITY = 900;\r\nconst MOVE_SPEED = 120;\r\nconst JUMP_FORCE = 360;\r\nconst FALL_DEATH = 1000;\r\nconst ENEMY_SPEED = 20;\r\nconst BIG_JUMP_FORCE = 450;\r\nlet CURRENT_JUMP_FORCE = JUMP_FORCE;\r\n\r\n// set game gravity\r\nsetGravity(GRAVITY);\r\n\r\nlet isJumping = true;\r\nlet isBig = false;\r\n\r\n// load sprites\r\nloadSprite('block', 'sprites/block.png');\r\nloadSprite('mario', 'sprites/mario.png');\r\nloadSprite('marioBig', 'sprites/marioBig.png');\r\nloadSprite('coin', 'sprites/coin.png');\r\nloadSprite('evil-shroom', 'sprites/evil-shroom.png');\r\nloadSprite('brick', 'sprites/brick.png');\r\nloadSprite('mushroom', 'sprites/mushroom.png');\r\nloadSprite('surprise', 'sprites/surprise.png');\r\nloadSprite('unboxed', 'sprites/unboxed.png');\r\nloadSprite('pipe-top-left', 'sprites/pipe-top-left.png');\r\nloadSprite('pipe-top-right', 'sprites/pipe-top-right.png');\r\nloadSprite('pipe-bottom-left', 'sprites/pipe-bottom-left.png');\r\nloadSprite('pipe-bottom-right', 'sprites/pipe-bottom-right.png');\r\nloadSprite('blue-block', 'sprites/blue-block.png');\r\nloadSprite('blue-brick', 'sprites/blue-brick.png');\r\nloadSprite('blue-steel', 'sprites/blue-steel.png');\r\nloadSprite('blue-evil-mushroom', 'sprites/blue-evil-mushroom.png');\r\nloadSprite('blue-surprise', 'sprites/blue-surprise.png');\r\n\r\n// Create new scene called game, pass two arguments, level and score\r\nscene(\"game\", ({ level, score }) => {\r\n    // create a map\r\n    const maps = [\r\n      [\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '     %   =*=%=                        ',\r\n        '                                      ',\r\n        '                            -+        ',\r\n        '                    ^   ^   ()        ',\r\n        '==============================   =====',\r\n      ]\r\n    ];\r\n  \r\n    // level configuration for individual sprites\r\n    const levelCfg = {\r\n      tileWidth: 20,\r\n      tileHeight: 20,\r\n      tiles: {\r\n        '=': () => [sprite('block'), area(), body({ isStatic: true })],\r\n        '$': () => [sprite('coin'), 'coin'],\r\n        '%': () => [sprite('surprise'), area(), body({ isStatic: true }), 'coin-surprise'],\r\n        '*': () => [sprite('surprise'), area(), body({ isStatic: true }), 'mushroom-surprise'],\r\n        '}': () => [sprite('unboxed'), area(), body({ isStatic: true })],\r\n        '(': () => [sprite('pipe-bottom-left'), area(), body({ isStatic: true }), scale(0.5)],\r\n        ')': () => [sprite('pipe-bottom-right'), area(), body({ isStatic: true }), scale(0.5)],\r\n        '-': () => [sprite('pipe-top-left'), area(), body({ isStatic: true }), scale(0.5), 'pipe'],\r\n        '+': () => [sprite('pipe-top-right'), area(), body({ isStatic: true }),  scale(0.5), 'pipe'],\r\n        '^': () => [sprite('evil-shroom'), area(), 'dangerous'],\r\n        '#': () => [sprite('mushroom'), area(), 'mushroom', body()],\r\n        '!': () => [sprite('blue-block'), area(), body({ isStatic: true }), scale(0.5)],\r\n        '£': () => [sprite('blue-brick'), area(), body({ isStatic: true }), scale(0.5)],\r\n        'z': () => [sprite('blue-evil-mushroom'), area(), scale(0.5), 'dangerous'],\r\n        '@': () => [sprite('blue-surprise'), area(), body({ isStatic: true }), scale(0.5), 'coin-surprise'],\r\n        'x': () => [sprite('blue-steel'), area(), body({ isStatic: true }), scale(0.5)]} \r\n    };\r\n  \r\n    // add level to game\r\n    const gameLevel = addLevel(maps[level], levelCfg);\r\n\r\n    // add a score lavel on screen\r\n    const scoreLabel = add([\r\n      text(score),\r\n      pos(30, 6),\r\n      {\r\n        value: score\r\n      }\r\n    ]);\r\n\r\n\r\n    // create a special function for some object\r\n    function big() {\r\n      return {\r\n        // in each frame, check if isBig, if it is, change current jump force\r\n        update() {\r\n          if (isBig) {\r\n            CURRENT_JUMP_FORCE = BIG_JUMP_FORCE;\r\n          }\r\n        },\r\n        // to check if object is big\r\n        isBig() {\r\n          return isBig;\r\n        },\r\n        smallify() {\r\n          // change sprite to mario small\r\n          this.use(sprite('mario'));\r\n          // adjust jump force\r\n          CURRENT_JUMP_FORCE = JUMP_FORCE;\r\n          isBig = false;\r\n        },\r\n        biggify() {\r\n          // we need to move the sprite a little bit up because sprite is higher\r\n          this.moveBy(0,-10);\r\n          // change spritte to mario big\r\n          this.use(sprite('marioBig'));\r\n          isBig = true;    \r\n        }\r\n      };\r\n    };\r\n\r\n    // add mario player\r\n    const player = add([\r\n      sprite('mario'), \r\n      pos(30, 0),\r\n      area(),\r\n      body(),\r\n      big() // we add the special function for this object\r\n    ]);\r\n\r\n    // continuous update for each frame\r\n    player.onUpdate(() => {\r\n        //center camera on player\r\n        camPos(player.pos); \r\n        // if player position is above fall death, go to lose screen\r\n        if (player.pos.y >= FALL_DEATH) {\r\n            go('lose', { score: 0});\r\n        }\r\n        // we need to change isJumping every time the player is on the ground\r\n        if(player.isGrounded()) {\r\n          isJumping = false;\r\n        }\r\n      });\r\n\r\n    // on key left movement and flip sprite\r\n    onKeyDown('left', () => {\r\n        player.move(-MOVE_SPEED, 0);\r\n        player.flipX = true;\r\n      });\r\n    \r\n    // on key right movement and flip sprite\r\n    onKeyDown('right', () => {\r\n        player.move(MOVE_SPEED, 0);\r\n        player.flipX = false;\r\n    });\r\n\r\n    // on key space jump if is in the ground\r\n    onKeyPress('space', () => {\r\n        if (player.isGrounded()) {\r\n            isJumping = true;\r\n            player.jump(JUMP_FORCE);\r\n        }\r\n    });\r\n\r\n\r\n    // headbutt even when player hits with head\r\n    player.on(\"headbutt\", (obj) => {\r\n      // if player hits with head a coin-surprise object\r\n      if (obj.is('coin-surprise')) {\r\n          //spawn a coin\r\n          let coin = gameLevel.spawn('$', obj.tilePos.sub(0, 1))\r\n          //destroy object\r\n          destroy(obj);\r\n          // spawn an unboxed sprited in the position of the surprise box\r\n          gameLevel.spawn('}', obj.tilePos.sub(0,0))\r\n          // wait 0.5 seconds, destroy the coin and add to score\r\n          wait(0.5, () => {\r\n            coin.destroy();\r\n            scoreLabel.value++;\r\n            scoreLabel.text = scoreLabel.value;\r\n          })\r\n        }\r\n        // if player hits with head a mushroom-surprise object\r\n        if (obj.is('mushroom-surprise')) {\r\n          gameLevel.spawn('#', obj.tilePos.sub(0, 1))\r\n          destroy(obj)\r\n          gameLevel.spawn('}', obj.tilePos.sub(0,0))\r\n        }\r\n    });\r\n\r\n    // update mushroom in each frame\r\n    onUpdate(\"mushroom\", (m) => {\r\n      m.move(20, 0);\r\n    });\r\n  \r\n    // update dangerous in each frame\r\n    onUpdate(\"dangerous\", (d) => {\r\n      d.move(-ENEMY_SPEED, 0);\r\n    });\r\n  \r\n    // if player collides with dangerous, go to lose screen\r\n    player.onCollide('dangerous', (d) => {\r\n      if (isJumping) {\r\n          destroy(d);\r\n      } else {\r\n          go('lose', { score: scoreLabel.value});\r\n      }\r\n    });\r\n\r\n    player.onCollide('mushroom', (m) => {\r\n      destroy(m);\r\n      player.biggify();\r\n    })\r\n})\r\n\r\n// Create new sceen with score\r\nscene('lose', ({ score }) => {\r\n    add([\r\n        text(`Total score: ${score}`), \r\n        anchor('center'), \r\n        pos(width()/2, \r\n        height()/ 2)])\r\n})\r\n\r\n// launch game with scene called game and pass two parameters\r\ngo(\"game\", { level: 0, score: 0});"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Let's add another level and make mario go through the pipe\r\n\r\n// initialize context with black background and scale\r\nkaboom({background: [0, 0, 0, 1], scale: 2});\r\n\r\nconst GRAVITY = 900;\r\nconst MOVE_SPEED = 120;\r\nconst JUMP_FORCE = 360;\r\nconst FALL_DEATH = 1000;\r\nconst ENEMY_SPEED = 20;\r\nconst BIG_JUMP_FORCE = 450;\r\nlet CURRENT_JUMP_FORCE = JUMP_FORCE;\r\n\r\n// set game gravity\r\nsetGravity(GRAVITY);\r\n\r\nlet isJumping = true;\r\nlet isBig = false;\r\n\r\n// load sprites\r\nloadSprite('block', 'sprites/block.png');\r\nloadSprite('mario', 'sprites/mario.png');\r\nloadSprite('marioBig', 'sprites/marioBig.png'); \r\nloadSprite('coin', 'sprites/coin.png');\r\nloadSprite('evil-shroom', 'sprites/evil-shroom.png');\r\nloadSprite('brick', 'sprites/brick.png');\r\nloadSprite('mushroom', 'sprites/mushroom.png');\r\nloadSprite('surprise', 'sprites/surprise.png');\r\nloadSprite('unboxed', 'sprites/unboxed.png');\r\nloadSprite('pipe-top-left', 'sprites/pipe-top-left.png');\r\nloadSprite('pipe-top-right', 'sprites/pipe-top-right.png');\r\nloadSprite('pipe-bottom-left', 'sprites/pipe-bottom-left.png');\r\nloadSprite('pipe-bottom-right', 'sprites/pipe-bottom-right.png');\r\nloadSprite('blue-block', 'sprites/blue-block.png');\r\nloadSprite('blue-brick', 'sprites/blue-brick.png');\r\nloadSprite('blue-steel', 'sprites/blue-steel.png');\r\nloadSprite('blue-evil-mushroom', 'sprites/blue-evil-mushroom.png');\r\nloadSprite('blue-surprise', 'sprites/blue-surprise.png');\r\n\r\n// Create new scene called game, pass two arguments, level and score\r\nscene(\"game\", ({ level, score }) => {\r\n    // create a map\r\n    const maps = [\r\n      [\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '     %   =*=%=                        ',\r\n        '                                      ',\r\n        '                            -+        ',\r\n        '                    ^   ^   ()        ',\r\n        '==============================   =====',\r\n      ],\r\n      [\r\n        '£                                       £',\r\n        '£                                       £',\r\n        '£                                       £',\r\n        '£                                       £',\r\n        '£                                       £',\r\n        '£        @@@@@@              x x        £',\r\n        '£                          x x x        £',\r\n        '£                        x x x x  x   -+£',\r\n        '£               z   z  x x x x x  x   ()£',\r\n        '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!',\r\n      ]\r\n    ];\r\n  \r\n    // level configuration for individual sprites\r\n    const levelCfg = {\r\n      tileWidth: 20,\r\n      tileHeight: 20,\r\n      tiles: {\r\n        '=': () => [sprite('block'), area(), body({ isStatic: true })],\r\n        '$': () => [sprite('coin'), 'coin'],\r\n        '%': () => [sprite('surprise'), area(), body({ isStatic: true }), 'coin-surprise'],\r\n        '*': () => [sprite('surprise'), area(), body({ isStatic: true }), 'mushroom-surprise'],\r\n        '}': () => [sprite('unboxed'), area(), body({ isStatic: true })],\r\n        '(': () => [sprite('pipe-bottom-left'), area(), body({ isStatic: true }), scale(0.5)],\r\n        ')': () => [sprite('pipe-bottom-right'), area(), body({ isStatic: true }), scale(0.5)],\r\n        '-': () => [sprite('pipe-top-left'), area(), body({ isStatic: true }), scale(0.5), 'pipe'],\r\n        '+': () => [sprite('pipe-top-right'), area(), body({ isStatic: true }),  scale(0.5), 'pipe'],\r\n        '^': () => [sprite('evil-shroom'), area(), 'dangerous'],\r\n        '#': () => [sprite('mushroom'), area(), 'mushroom', body()],\r\n        '!': () => [sprite('blue-block'), area(), body({ isStatic: true }), scale(0.5)],\r\n        '£': () => [sprite('blue-brick'), area(), body({ isStatic: true }), scale(0.5)],\r\n        'z': () => [sprite('blue-evil-mushroom'), area(), scale(0.5), 'dangerous'],\r\n        '@': () => [sprite('blue-surprise'), area(), body({ isStatic: true }), scale(0.5), 'coin-surprise'],\r\n        'x': () => [sprite('blue-steel'), area(), body({ isStatic: true }), scale(0.5)]} \r\n    };\r\n  \r\n    // add level to game\r\n    const gameLevel = addLevel(maps[level], levelCfg);\r\n\r\n    // add a score lavel on screen\r\n    const scoreLabel = add([\r\n      text(score),\r\n      pos(30, 6),\r\n      {\r\n        value: score\r\n      }\r\n    ]);\r\n\r\n\r\n    // create a special function for some object\r\n    function big() {\r\n      return {\r\n        // in each frame, check if isBig, if it is, change current jump force\r\n        update() {\r\n          if (isBig) {\r\n            CURRENT_JUMP_FORCE = BIG_JUMP_FORCE;\r\n          }\r\n        },\r\n        // to check if object is big\r\n        isBig() {\r\n          return isBig;\r\n        },\r\n        smallify() {\r\n          // change sprite to mario small\r\n          this.use(sprite('mario'));\r\n          // adjust jump force\r\n          CURRENT_JUMP_FORCE = JUMP_FORCE;\r\n          isBig = false;\r\n        },\r\n        biggify() {\r\n          // we need to move the sprite a little bit up because sprite is higher\r\n          this.moveBy(0,-10);\r\n          // change spritte to mario big\r\n          this.use(sprite('marioBig'));\r\n          isBig = true;    \r\n        }\r\n      };\r\n    };\r\n\r\n    // add mario player\r\n    const player = add([\r\n      sprite('mario'), \r\n      pos(30, 0),\r\n      area(),\r\n      body(),\r\n      big() // we add the special function for this object\r\n    ]);\r\n\r\n    // continuous update for each frame\r\n    player.onUpdate(() => {\r\n        //center camera on player\r\n        camPos(player.pos); \r\n        // if player position is above fall death, go to lose screen\r\n        if (player.pos.y >= FALL_DEATH) {\r\n            go('lose', { score: 0});\r\n        }\r\n        // we need to change isJumping every time the player is on the ground\r\n        if(player.isGrounded()) {\r\n          isJumping = false;\r\n        }\r\n      });\r\n\r\n    // on key left movement and flip sprite\r\n    onKeyDown('left', () => {\r\n        player.move(-MOVE_SPEED, 0);\r\n        player.flipX = true;\r\n      });\r\n    \r\n    // on key right movement and flip sprite\r\n    onKeyDown('right', () => {\r\n        player.move(MOVE_SPEED, 0);\r\n        player.flipX = false;\r\n    });\r\n\r\n    // on key space jump if is in the ground\r\n    onKeyPress('space', () => {\r\n        if (player.isGrounded()) {\r\n            isJumping = true;\r\n            player.jump(JUMP_FORCE);\r\n        }\r\n    });\r\n\r\n\r\n    // headbutt even when player hits with head\r\n    player.on(\"headbutt\", (obj) => {\r\n      // if player hits with head a coin-surprise object\r\n      if (obj.is('coin-surprise')) {\r\n          //spawn a coin\r\n          let coin = gameLevel.spawn('$', obj.tilePos.sub(0, 1))\r\n          //destroy object\r\n          destroy(obj);\r\n          // spawn an unboxed sprited in the position of the surprise box\r\n          gameLevel.spawn('}', obj.tilePos.sub(0,0))\r\n          // wait 0.5 seconds, destroy the coin and add to score\r\n          wait(0.5, () => {\r\n            coin.destroy();\r\n            scoreLabel.value++;\r\n            scoreLabel.text = scoreLabel.value;\r\n          })\r\n        }\r\n        // if player hits with head a mushroom-surprise object\r\n        if (obj.is('mushroom-surprise')) {\r\n          gameLevel.spawn('#', obj.tilePos.sub(0, 1))\r\n          destroy(obj)\r\n          gameLevel.spawn('}', obj.tilePos.sub(0,0))\r\n        }\r\n    });\r\n\r\n    // update mushroom in each frame\r\n    onUpdate(\"mushroom\", (m) => {\r\n      m.move(20, 0);\r\n    });\r\n  \r\n    // update dangerous in each frame\r\n    onUpdate(\"dangerous\", (d) => {\r\n      d.move(-ENEMY_SPEED, 0);\r\n    });\r\n  \r\n    // if player collides with dangerous, go to lose screen\r\n    player.onCollide('dangerous', (d) => {\r\n      if (isJumping) {\r\n          destroy(d);\r\n      } else {\r\n          go('lose', { score: scoreLabel.value});\r\n      }\r\n    });\r\n\r\n    player.onCollide('mushroom', (m) => {\r\n      destroy(m);\r\n      player.biggify();\r\n    })\r\n\r\n    // when player is colliding with pipe, and press down go to another level\r\n    player.onCollide('pipe', () => {\r\n      onKeyPress('down', () => {\r\n          go('game', {\r\n          level: (level + 1) % maps.length,\r\n          score: scoreLabel.value\r\n        })\r\n      });\r\n    });\r\n})\r\n\r\n// Create new sceen with score\r\nscene('lose', ({ score }) => {\r\n    add([\r\n        text(`Total score: ${score}`), \r\n        anchor('center'), \r\n        pos(width()/2, \r\n        height()/ 2)])\r\n})\r\n\r\n// launch game with scene called game and pass two parameters\r\ngo(\"game\", { level: 0, score: 0});"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Let's make mario sprite animate!\r\n\r\n// initialize context with black background and scale\r\nkaboom({background: [0, 0, 0, 1], scale: 2});\r\n\r\nconst GRAVITY = 900;\r\nconst MOVE_SPEED = 120;\r\nconst JUMP_FORCE = 360;\r\nconst FALL_DEATH = 1000;\r\nconst ENEMY_SPEED = 20;\r\nconst BIG_JUMP_FORCE = 450;\r\nlet CURRENT_JUMP_FORCE = JUMP_FORCE;\r\n\r\n// set game gravity\r\nsetGravity(GRAVITY);\r\n\r\nlet isJumping = true;\r\nlet isBig = false;\r\n\r\n// Sprite animation configuration for mario small\r\nloadSprite(\"mario_small\",'sprites/mario_small.png', {\r\n\t// The image contains 9 frames layed out horizontally, slice it into individual frames\r\n\tsliceX: 6,\r\n\t// Define animations\r\n\tanims: {\r\n\t\t\"idle\": 0,\r\n\t\t\"run\": {\r\n\t\t\tfrom: 1,\r\n\t\t\tto: 3,\r\n\t\t\tspeed: 10,\r\n\t\t\tloop: true,\r\n\t\t},\r\n\t\t// This animation only has 1 frame\r\n\t\t\"jump\": 5,\r\n\t}});\r\n\r\n  // Sprite animation configuration for mario big\r\n  loadSprite(\"mario_big\",'sprites/mario_big.png', {\r\n    // The image contains 9 frames layed out horizontally, slice it into individual frames\r\n    sliceX: 6,\r\n    // Define animations\r\n    anims: {\r\n      \"idle\": 0,\r\n      \"run\": {\r\n        from: 1,\r\n        to: 3,\r\n        speed: 10,\r\n        loop: true,\r\n      },\r\n      // This animation only has 1 frame\r\n      \"jump\": 5,\r\n    }});\r\n\r\n// load sprites\r\nloadSprite('block', 'sprites/block.png');\r\nloadSprite('coin', 'sprites/coin.png');\r\nloadSprite('evil-shroom', 'sprites/evil-shroom.png');\r\nloadSprite('brick', 'sprites/brick.png');\r\nloadSprite('mushroom', 'sprites/mushroom.png');\r\nloadSprite('surprise', 'sprites/surprise.png');\r\nloadSprite('unboxed', 'sprites/unboxed.png');\r\nloadSprite('pipe-top-left', 'sprites/pipe-top-left.png');\r\nloadSprite('pipe-top-right', 'sprites/pipe-top-right.png');\r\nloadSprite('pipe-bottom-left', 'sprites/pipe-bottom-left.png');\r\nloadSprite('pipe-bottom-right', 'sprites/pipe-bottom-right.png');\r\nloadSprite('blue-block', 'sprites/blue-block.png');\r\nloadSprite('blue-brick', 'sprites/blue-brick.png');\r\nloadSprite('blue-steel', 'sprites/blue-steel.png');\r\nloadSprite('blue-evil-mushroom', 'sprites/blue-evil-mushroom.png');\r\nloadSprite('blue-surprise', 'sprites/blue-surprise.png');\r\n\r\n// Create new scene called game, pass two arguments, level and score\r\nscene(\"game\", ({ level, score }) => {\r\n    // create a map\r\n    const maps = [\r\n      [\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '                                      ',\r\n        '     %   =*=%=                        ',\r\n        '                                      ',\r\n        '                            -+        ',\r\n        '                    ^   ^   ()        ',\r\n        '==============================   =====',\r\n      ],\r\n      [\r\n        '£                                       £',\r\n        '£                                       £',\r\n        '£                                       £',\r\n        '£                                       £',\r\n        '£                                       £',\r\n        '£        @@@@@@              x x        £',\r\n        '£                          x x x        £',\r\n        '£                        x x x x  x   -+£',\r\n        '£               z   z  x x x x x  x   ()£',\r\n        '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!',\r\n      ]\r\n    ];\r\n  \r\n    // level configuration for individual sprites\r\n    const levelCfg = {\r\n      tileWidth: 20,\r\n      tileHeight: 20,\r\n      tiles: {\r\n        '=': () => [sprite('block'), area(), body({ isStatic: true })],\r\n        '$': () => [sprite('coin'), 'coin'],\r\n        '%': () => [sprite('surprise'), area(), body({ isStatic: true }), 'coin-surprise'],\r\n        '*': () => [sprite('surprise'), area(), body({ isStatic: true }), 'mushroom-surprise'],\r\n        '}': () => [sprite('unboxed'), area(), body({ isStatic: true })],\r\n        '(': () => [sprite('pipe-bottom-left'), area(), body({ isStatic: true }), scale(0.5)],\r\n        ')': () => [sprite('pipe-bottom-right'), area(), body({ isStatic: true }), scale(0.5)],\r\n        '-': () => [sprite('pipe-top-left'), area(), body({ isStatic: true }), scale(0.5), 'pipe'],\r\n        '+': () => [sprite('pipe-top-right'), area(), body({ isStatic: true }),  scale(0.5), 'pipe'],\r\n        '^': () => [sprite('evil-shroom'), area(), 'dangerous'],\r\n        '#': () => [sprite('mushroom'), area(), 'mushroom', body()],\r\n        '!': () => [sprite('blue-block'), area(), body({ isStatic: true }), scale(0.5)],\r\n        '£': () => [sprite('blue-brick'), area(), body({ isStatic: true }), scale(0.5)],\r\n        'z': () => [sprite('blue-evil-mushroom'), area(), scale(0.5), 'dangerous'],\r\n        '@': () => [sprite('blue-surprise'), area(), body({ isStatic: true }), scale(0.5), 'coin-surprise'],\r\n        'x': () => [sprite('blue-steel'), area(), body({ isStatic: true }), scale(0.5)]} \r\n    };\r\n  \r\n    // add level to game\r\n    const gameLevel = addLevel(maps[level], levelCfg);\r\n\r\n    // add a score lavel on screen\r\n    const scoreLabel = add([\r\n      text(score),\r\n      pos(30, 6),\r\n      {\r\n        value: score\r\n      }\r\n    ]);\r\n\r\n\r\n    // create a special function for some object\r\n    function big() {\r\n      return {\r\n        // in each frame, check if isBig, if it is, change current jump force\r\n        update() {\r\n          if (isBig) {\r\n            CURRENT_JUMP_FORCE = BIG_JUMP_FORCE;\r\n          }\r\n        },\r\n        // to check if object is big\r\n        isBig() {\r\n          return isBig;\r\n        },\r\n        smallify() {\r\n          // change sprite to mario small\r\n          this.use(sprite('mario_small'));\r\n          // adjust jump force\r\n          CURRENT_JUMP_FORCE = JUMP_FORCE;\r\n          isBig = false;\r\n        },\r\n        biggify() {\r\n          // we need to move the sprite a little bit up because sprite is higher\r\n          this.moveBy(0,-10);\r\n          // change spritte to mario big\r\n          this.use(sprite('mario_big'));\r\n          isBig = true;    \r\n        }\r\n      };\r\n    };\r\n\r\n    // add mario player\r\n    const player = add([\r\n      sprite(isBig ? 'mario_big' : 'mario_small'), \r\n      pos(30, 0),\r\n      area(),\r\n      body(),\r\n      big() // we add the special function for this object\r\n    ]);\r\n\r\n    // continuous update for each frame\r\n    player.onUpdate(() => {\r\n        //center camera on player\r\n        camPos(player.pos); \r\n        // if player position is above fall death, go to lose screen\r\n        if (player.pos.y >= FALL_DEATH) {\r\n            go('lose', { score: 0});\r\n        }\r\n        // we need to change isJumping every time the player is on the ground\r\n        if(player.isGrounded()) {\r\n          isJumping = false;\r\n        }\r\n      });\r\n\r\n      // when player is in the ground, animate accordingly\r\n      player.onGround(() => {\r\n        if (!isKeyDown(\"left\") && !isKeyDown(\"right\")) {\r\n          player.play(\"idle\");\r\n        } else {\r\n          player.play(\"run\");\r\n        }\r\n      })\r\n\r\n    // on key left movement and flip sprite\r\n    onKeyDown('left', () => {\r\n        player.move(-MOVE_SPEED, 0);\r\n        player.flipX = true;\r\n        // if player is grounded and player current animation is not running, make it run\r\n        if (player.isGrounded() && player.curAnim() !== \"run\") {\r\n          player.play(\"run\");\r\n        }\r\n      });\r\n    \r\n    // on key right movement and flip sprite\r\n    onKeyDown('right', () => {\r\n        player.move(MOVE_SPEED, 0);\r\n        player.flipX = false;\r\n        // if player is grounded and player current animation is not running, make it run\r\n        if (player.isGrounded() && player.curAnim() !== \"run\") {\r\n          player.play(\"run\");\r\n        }\r\n    });\r\n\r\n    // needed for stoping running animation\r\n    onKeyRelease('left', () => {\r\n      // Only reset to \"idle\" if player is not holding any of these keys\r\n        if (player.isGrounded() && !isKeyDown(\"left\") && !isKeyDown(\"right\")) {\r\n          player.play(\"idle\")\r\n        } \r\n      });\r\n  \r\n    // needed for stoping running animation\r\n    onKeyRelease('right', () => {\r\n      // Only reset to \"idle\" if player is not holding any of these keys\r\n        if (player.isGrounded() && !isKeyDown(\"left\") && !isKeyDown(\"right\")) {\r\n          player.play(\"idle\")\r\n        }\r\n      });\r\n\r\n    // on key space jump if is in the ground\r\n    onKeyPress('space', () => {\r\n        if (player.isGrounded()) {\r\n            isJumping = true;\r\n            player.jump(JUMP_FORCE);\r\n            // set animation to jump\r\n            player.play(\"jump\");\r\n        }\r\n    });\r\n\r\n\r\n    // headbutt even when player hits with head\r\n    player.on(\"headbutt\", (obj) => {\r\n      // if player hits with head a coin-surprise object\r\n      if (obj.is('coin-surprise')) {\r\n          //spawn a coin\r\n          let coin = gameLevel.spawn('$', obj.tilePos.sub(0, 1))\r\n          //destroy object\r\n          destroy(obj);\r\n          // spawn an unboxed sprited in the position of the surprise box\r\n          gameLevel.spawn('}', obj.tilePos.sub(0,0))\r\n          // wait 0.5 seconds, destroy the coin and add to score\r\n          wait(0.5, () => {\r\n            coin.destroy();\r\n            scoreLabel.value++;\r\n            scoreLabel.text = scoreLabel.value;\r\n          })\r\n        }\r\n        // if player hits with head a mushroom-surprise object\r\n        if (obj.is('mushroom-surprise')) {\r\n          gameLevel.spawn('#', obj.tilePos.sub(0, 1))\r\n          destroy(obj)\r\n          gameLevel.spawn('}', obj.tilePos.sub(0,0))\r\n        }\r\n    });\r\n\r\n    // update mushroom in each frame\r\n    onUpdate(\"mushroom\", (m) => {\r\n      m.move(20, 0);\r\n    });\r\n  \r\n    // update dangerous in each frame\r\n    onUpdate(\"dangerous\", (d) => {\r\n      d.move(-ENEMY_SPEED, 0);\r\n    });\r\n  \r\n    // if player collides with dangerous, go to lose screen\r\n    player.onCollide('dangerous', (d) => {\r\n      if (isJumping) {\r\n          destroy(d);\r\n      } else {\r\n          go('lose', { score: scoreLabel.value});\r\n      }\r\n    });\r\n\r\n    player.onCollide('mushroom', (m) => {\r\n      destroy(m);\r\n      player.biggify();\r\n    })\r\n\r\n    // when player is colliding with pipe, and press down go to another level\r\n    player.onCollide('pipe', () => {\r\n      onKeyPress('down', () => {\r\n          go('game', {\r\n          level: (level + 1) % maps.length,\r\n          score: scoreLabel.value\r\n        })\r\n      });\r\n    });\r\n})\r\n\r\n// Create new sceen with score\r\nscene('lose', ({ score }) => {\r\n    add([\r\n        text(`Total score: ${score}`), \r\n        anchor('center'), \r\n        pos(width()/2, \r\n        height()/ 2)])\r\n})\r\n\r\n// launch game with scene called game and pass two parameters\r\ngo(\"game\", { level: 0, score: 0});"
            ],
            "outputs": []
        }
    ]
}
